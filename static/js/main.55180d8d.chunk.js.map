{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","components/addButton.jsx","components/stock.jsx","components/Modal/modal.js","components/ModalChart/modalChart.js","components/portfolio.jsx","components/portfolios.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","Stock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSelect","bind","assertThisInitialized","isSelected","forceUpdate","selectStockMethod","name","val","react_default","a","createElement","className","quantity","unitValue","totalValue","onClick","fa","modal","style","transform","show","visibility","opacity","close","children","modalChart","timesrs","TimeSeries","columns","points","Portfolio","openModalHandler","setState","isShowing","closeModalHandler","openModalChartHandler","state","selectedStocks","length","len","stocks","newestDate","endDate","oldestDate","startDate","isShowingChart","alert","closeModalChartHandler","createSelectedXAxises","axises","key","key2","col","chartStyle","styler","color","width","push","entry","axis","series","createSelectedYAxises","maxVal","minVal","i","k","j","value","parseFloat","id","label","min","max","type","format","hits","currency","inputStockSymbol","inputShareAmount","chartWidth","clearEmpties","updateChartDimensions","getRandomColor","Math","floor","random","obj","newObj","keys","forEach","prop","confirm","deleteMethod","newArray","JSON","parse","stringify","slice","newSelectedStocks","splice","dict","evt","Date","parts","target","split","evtAsDate","evtAsDateInMs","getTime","toString","todayDate","toFixed","str","trim","test","_this2","getTotalValue","stockName","shareCount","isTickerValid","fetch","then","response","ok","Error","statusText","json","dataTemp","myDateInMs","Array","reverse","fullData","catch","error","console","log","totalVal","getCurrencySymbol","innerWidth","addEventListener","localStorage","getItem","nextProps","nextState","setItem","removeEventListener","updateWindowDimensions","legends","legendLineStyle","backgroundcolor","marginLeft","marginRight","marginTop","height","backgroundColor","float","_this3","components_ModalChart_modalChart","timeAxisAngledLabels","timeAxisHeight","timeRange","TimeRange","createLegends","onChange","handleStockStartDateChange","handleStockEndDateChange","handleChangeCurrencyToEUR","handleChangeCurrencyToUSD","class","aria-label","handleDelete","aria-hidden","map","stock","components_stock","components_Modal_modal","handleStockSymbolChange","handleShareAmountChange","step","handleAddStock","deleteSelectedStocks","Portfolios","portfolios","inputValue","isEmpty","hasOwnProperty","o","removeItem","portfolioName","prompt","document","body","clear","handleAddPortfolio","portfolio","components_portfolio","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55180d8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nclass AddBtn extends Component {\r\n  state = {\r\n    stocks: 0\r\n  };\r\n\r\n  handleAddPortfolio = () => {\r\n    console.log(\"Event call to add portfolio\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button className=\"btn btn-primary btn-sm top\">Add Portfolio</button>\r\n        <span> {this.state.stocks} </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddBtn;\r\n","import React, { Component } from \"react\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\n\r\nclass Stock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSelect = this.handleSelect.bind(this);\r\n    this.isSelected = false;\r\n  }\r\n  //call select stock in parent\r\n  handleSelect() {\r\n    if (this.isSelected) {\r\n      this.isSelected = false;\r\n    } else {\r\n      this.isSelected = true;\r\n    }\r\n\r\n    //force update render to register select value\r\n    this.forceUpdate();\r\n    this.props.selectStockMethod(this.props.name, this.isSelected);\r\n  }\r\n  returnTotalValue() {\r\n    //return totalValue;\r\n  }\r\n  getIsSelected(val) {\r\n    return val;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={\"stock \" + (this.isSelected ? \"selected\" : \"\")}>\r\n        <span className=\"stockInfo\">{this.props.name}</span>\r\n        <span className=\"stockInfo\">{this.props.quantity}</span>\r\n        <span className=\"stockInfo\">{this.props.unitValue}</span>\r\n        <span className=\"stockInfo\">{this.props.totalValue}</span>\r\n        <button onClick={this.handleSelect} className=\"btn btn-light btn-sm\">\r\n          <FaPlus />\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Stock;\r\n","import React from \"react\";\r\n\r\nimport \"./modal.css\";\r\n\r\nconst modal = props => {\r\n  return (\r\n    <div\r\n      className=\"modal-wrapper\"\r\n      style={{\r\n        transform: props.show ? \"translateY(-20vh)\" : \"translateY(-80vh)\",\r\n\r\n        visibility: props.show ? \"visible\" : \"hidden\",\r\n        opacity: props.show ? \"1\" : \"0\"\r\n      }}\r\n    >\r\n      <div className=\"modal-header\">\r\n        <h3>Add Stock</h3>\r\n        <span className=\"close-modal-btn\" onClick={props.close}>\r\n          ×\r\n        </span>\r\n      </div>\r\n      <div className=\"modal-body\">{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default modal;\r\n","import React from \"react\";\r\n\r\nimport \"./modalChart.css\";\r\n\r\nconst modalChart = props => {\r\n  return (\r\n    <div\r\n      className=\"modal-wrapper\"\r\n      style={{\r\n        transform: props.show ? \"translateY(-10vh)\" : \"translateY(-80vh)\",\r\n        visibility: props.show ? \"visible\" : \"hidden\",\r\n\r\n        opacity: props.show ? \"1\" : \"0\"\r\n      }}\r\n    >\r\n      <div className=\"modal-header\">\r\n        <h3>{props.name} historic stock data</h3>\r\n        <span className=\"close-modal-btn\" onClick={props.close}>\r\n          ×\r\n        </span>\r\n      </div>\r\n\r\n      <div className=\"modal-body\">{props.children}</div>\r\n      {/* <div className=\"modal-footer\">\r\n          <button className=\"btn-cancel\" onClick={props.close}>\r\n            CLOSE\r\n          </button>\r\n          <button className=\"btn-continue\">CONTINUE</button>\r\n        </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default modalChart;\r\n","import React, { Component } from \"react\";\r\nimport Stock from \"./stock\";\r\nimport Modal from \"./Modal/modal\";\r\nimport ModalChart from \"./ModalChart/modalChart\";\r\n\r\nimport {\r\n  Charts,\r\n  ChartContainer,\r\n  ChartRow,\r\n  YAxis,\r\n  Legend,\r\n  LineChart,\r\n  styler\r\n} from \"react-timeseries-charts\";\r\n\r\nimport { TimeSeries, TimeRange } from \"pondjs\";\r\n\r\nconst baseUrl =\r\n  \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\";\r\n\r\nconst fullDataUrl =\r\n  \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\";\r\nconst latestDataUrl =\r\n  \"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=\";\r\nconst API_KEY = \"UE8SOMJ4OW13XXPG\";\r\n\r\n//some garbage data for initializing the time series, will be replaced\r\n//when stocks are added\r\nconst data = {\r\n  name: \"traffic\",\r\n  columns: [\"time\", \"value\"],\r\n  points: [\r\n    [1400425947000, 52],\r\n    [1400425948000, 18],\r\n    [1400425949000, 26],\r\n    [1400425950000, 93]\r\n  ]\r\n};\r\n\r\nvar timesrs = new TimeSeries(data);\r\n\r\nclass Portfolio extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Assign state itself, and a default value for items\r\n    this.state = {\r\n      stocks: [],\r\n      selectedStocks: [],\r\n      hits: [],\r\n      currency: \"USD\",\r\n      isShowing: false, //modal component is not showing\r\n      isShowingChart: false,\r\n      inputStockSymbol: \"\",\r\n      inputShareAmount: \"\",\r\n      chartWidth: 700,\r\n      startDate: 1538427600000,\r\n      endDate: 1533848400000\r\n    };\r\n    this.clearEmpties = this.clearEmpties.bind(this);\r\n    this.updateChartDimensions = this.updateChartDimensions.bind(this);\r\n    this.getRandomColor = this.getRandomColor.bind(this);\r\n  }\r\n  getRandomColor() {\r\n    var letters = \"0123456789ABCDEF\";\r\n    var color = \"#\";\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  clearEmpties(obj) {\r\n    let newObj = [];\r\n    Object.keys(obj).forEach(prop => {\r\n      if (obj[prop]) {\r\n        newObj[prop] = obj[prop];\r\n      }\r\n    });\r\n    return newObj;\r\n  }\r\n  //opens the add stock modal when user clicks button\r\n  openModalHandler = () => {\r\n    this.setState({\r\n      isShowing: true\r\n    });\r\n  };\r\n  closeModalHandler = () => {\r\n    this.setState({\r\n      isShowing: false\r\n    });\r\n  };\r\n  //opens the chart modal when user clicks show graph button\r\n  openModalChartHandler = () => {\r\n    if (this.state.selectedStocks.length > 0) {\r\n      //set default time window before user changes it\r\n      //set chart end date to newest data in first stock\r\n      var len = this.state.stocks[0][\"fullData\"][\"points\"].length - 1;\r\n      var newestDate = this.state.stocks[0][\"fullData\"][\"points\"][len][0];\r\n      this.setState({ endDate: newestDate });\r\n      //set chart start date to oldest  data in first stock\r\n      var oldestDate = this.state.stocks[0][\"fullData\"][\"points\"][0][0];\r\n      this.setState({ startDate: oldestDate });\r\n\r\n      this.setState({\r\n        isShowingChart: true\r\n      });\r\n    } else {\r\n      alert(\"No stocks selected\");\r\n    }\r\n  };\r\n  closeModalChartHandler = () => {\r\n    this.setState({\r\n      isShowingChart: false\r\n    });\r\n  };\r\n  //calls function to delete current portfolio in Portfolios\r\n  handleDelete() {\r\n    var retVal = window.confirm(\r\n      \"Are you sure you want to delete the portfolio?\"\r\n    );\r\n    if (retVal == true) {\r\n      this.props.deleteMethod(this.props.name);\r\n    }\r\n  }\r\n\r\n  deleteSelectedStocks() {\r\n    var newArray = JSON.parse(JSON.stringify(this.state.stocks.slice()));\r\n    var newSelectedStocks = this.state.selectedStocks.slice();\r\n\r\n    //loop through selected stocks and delete them from all stocks\r\n    for (var key in newSelectedStocks) {\r\n      for (var key2 in newArray) {\r\n        if (newArray[key2][\"name\"] === newSelectedStocks[key][\"name\"]) {\r\n          //delete newArray[key2];\r\n          newArray.splice(key2, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    newSelectedStocks = [{}];\r\n    newArray = this.clearEmpties(newArray);\r\n    this.setState({ stocks: newArray });\r\n    this.setState({ selectedStocks: newSelectedStocks });\r\n  }\r\n  //selects and deselects stock and assigns random color for graph\r\n  selectStockMethod(val, state) {\r\n    var newArray = JSON.parse(\r\n      JSON.stringify(this.state.selectedStocks.slice())\r\n    );\r\n    //if stock is deselected, remove from selected array\r\n    if (state === false) {\r\n      for (var i in newArray) {\r\n        if (newArray[i][\"name\"] === val) {\r\n          newArray.splice(i, 1);\r\n        }\r\n      }\r\n    } else {\r\n      //if selected and not in array, add to selected array\r\n      if (!(val in newArray)) {\r\n        var dict = {\r\n          name: val,\r\n          color: this.getRandomColor() //get random color for graph\r\n        };\r\n        newArray.push(dict);\r\n      }\r\n    }\r\n    newArray = this.clearEmpties(newArray);\r\n    this.setState({ selectedStocks: newArray });\r\n  }\r\n  handleStockStartDateChange(evt) {\r\n    //set oldest valid date to oldest date in first stock data\r\n    var oldestDate = new Date(this.state.stocks[0][\"fullData\"][\"points\"][0][0]);\r\n    var parts = evt.target.value.split(\"-\");\r\n    var evtAsDate = new Date(parts[0], parts[1] - 1, parts[2]);\r\n    var todayDate = new Date();\r\n    var startDate = todayDate;\r\n    var evtAsDateInMs = evtAsDate.getTime();\r\n\r\n    if (evtAsDate >= startDate || evtAsDate < oldestDate) {\r\n      if (evtAsDate >= startDate) {\r\n        alert(\"Starting date must be prior to current date\");\r\n      } else\r\n        alert(\r\n          \"Stock data prior to \" + oldestDate.toString() + \" is not available\"\r\n        );\r\n    } else {\r\n      this.setState({ startDate: evtAsDateInMs });\r\n    }\r\n  }\r\n  handleStockEndDateChange(evt) {\r\n    var oldestDate = this.state.startDate;\r\n    var parts = evt.target.value.split(\"-\");\r\n    var evtAsDate = new Date(parts[0], parts[1] - 1, parts[2]);\r\n    var todayDate = new Date();\r\n    var evtAsDateInMs = evtAsDate.getTime();\r\n\r\n    if (evtAsDate >= todayDate || evtAsDate < oldestDate) {\r\n      if (evtAsDate >= todayDate) {\r\n        alert(\"Ending date must be prior to current date\");\r\n      } else alert(\"Chart time window too short\");\r\n    } else {\r\n      this.setState({ endDate: evtAsDateInMs });\r\n    }\r\n  }\r\n\r\n  handleStockSymbolChange(evt) {\r\n    this.setState({ inputStockSymbol: evt.target.value });\r\n  }\r\n  handleShareAmountChange(evt) {\r\n    this.setState({ inputShareAmount: evt.target.value });\r\n  }\r\n  handleChangeCurrencyToEUR() {\r\n    if (this.state.currency !== \"EUR\") {\r\n      this.setState({ currency: \"EUR\" });\r\n      var newArray = this.state.stocks.slice();\r\n      for (var i in newArray) {\r\n        //only show 2 decimals\r\n        newArray[i][\"unitValue\"] = parseFloat(\r\n          (newArray[i][\"unitValue\"] * 0.88).toFixed(3)\r\n        );\r\n        newArray[i][\"totalValue\"] = parseFloat(\r\n          (newArray[i][\"totalValue\"] * 0.88).toFixed(3)\r\n        );\r\n      }\r\n\r\n      this.setState({ stocks: newArray });\r\n    }\r\n  }\r\n  handleChangeCurrencyToUSD() {\r\n    if (this.state.currency !== \"USD\") {\r\n      this.setState({ currency: \"USD\" });\r\n      var newArray = this.state.stocks.slice();\r\n      for (var i in newArray) {\r\n        newArray[i][\"unitValue\"] = parseFloat(\r\n          (newArray[i][\"unitValue\"] * 1.14).toFixed(3)\r\n        );\r\n        newArray[i][\"totalValue\"] = parseFloat(\r\n          (newArray[i][\"totalValue\"] * 1.14).toFixed(3)\r\n        );\r\n      }\r\n      this.setState({ stocks: newArray });\r\n    }\r\n  }\r\n  handleUpdateDateStart(evt) {\r\n    this.setState({ startDate: evt.target.value });\r\n  }\r\n  handleUpdateDateEnd(evt) {\r\n    this.setState({ endDate: evt.target.value });\r\n  }\r\n  //checks if ticker is valid\r\n  isTickerValid(str) {\r\n    str.trim();\r\n    if (/^[a-zA-Z]+$/.test(str) && str.length <= 4) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  handleAddStock() {\r\n    //max number of different symbols is 50\r\n    if (this.state.stocks.length < 50) {\r\n      this.getTotalValue();\r\n      //get inputs which are stored in state and changed when user types in input\r\n      var stockName = this.state.inputStockSymbol;\r\n      var shareCount = this.state.inputShareAmount;\r\n      var isValid = this.isTickerValid(stockName) && shareCount > 0;\r\n      if (!isValid) return;\r\n\r\n      //if the stock with symbol already exists..\r\n      for (var i in this.state.stocks) {\r\n        if (this.state.stocks[i][\"name\"] === stockName) {\r\n          var newArray = this.state.stocks.slice();\r\n          //..increase the amount of shares in stock\r\n          newArray[i][\"quantity\"] += shareCount;\r\n          //increase total value by amount of shares * unit value\r\n          newArray[i][\"totalValue\"] += (\r\n            shareCount * newArray[i][\"unitValue\"]\r\n          ).toFixed(3);\r\n          this.setState({ stocks: newArray });\r\n\r\n          return;\r\n        }\r\n      }\r\n      //if stock with symbol does not exist yet\r\n      //make API call and return stock data\r\n      var url = baseUrl + stockName + \"&apikey=\" + API_KEY;\r\n      fetch(url)\r\n        //check if response is ok\r\n        .then(function(response) {\r\n          if (!response.ok) {\r\n            throw Error(response.statusText);\r\n          }\r\n          return response;\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n          var name = response[\"Meta Data\"][\"2. Symbol\"];\r\n          var unitValue = parseFloat(\r\n            response[\"Time Series (Daily)\"][\r\n              Object.keys(response[\"Time Series (Daily)\"])[0]\r\n            ][\"1. open\"]\r\n          );\r\n          //from this data format a time series can easily be constructed\r\n          //for drawing the stock data graph\r\n          var dataTemp = {\r\n            name: name,\r\n            columns: [\"time\", name],\r\n            points: []\r\n          };\r\n\r\n          //getting the index of the entries for the stock data and looping\r\n          //through the stock data\r\n          for (var i in Object.keys(response[\"Time Series (Daily)\"])) {\r\n            //gets the key at index, which is the date\r\n            var dateAsString = Object.keys(response[\"Time Series (Daily)\"])[i];\r\n            var parts = dateAsString.split(\"-\");\r\n            // Please pay attention to the month (parts[1]); JavaScript counts months from 0:\r\n            // January - 0, February - 1, etc.\r\n            var myDate = new Date(parts[0], parts[1] - 1, parts[2]);\r\n            var myDateInMs = myDate.getTime();\r\n            //gets the value using the key at index\r\n            var value = parseFloat(\r\n              response[\"Time Series (Daily)\"][\r\n                Object.keys(response[\"Time Series (Daily)\"])[i]\r\n              ][\"1. open\"]\r\n            ).toFixed(3);\r\n            //creating new array for time and values inside points\r\n            dataTemp[\"points\"].push(new Array());\r\n            dataTemp[\"points\"][i][0] = myDateInMs;\r\n            dataTemp[\"points\"][i][1] = value;\r\n          }\r\n          //data needs to start from earliest date in order to be accepted\r\n          //as time series\r\n          dataTemp[\"points\"].reverse();\r\n\r\n          //add to stocks state array so stock will be rendered\r\n          var newArray = this.state.stocks.slice();\r\n\r\n          var dict = {\r\n            name: name,\r\n            unitValue: unitValue,\r\n            quantity: shareCount,\r\n            totalValue: parseFloat((unitValue * shareCount).toFixed(3)),\r\n            fullData: dataTemp\r\n          };\r\n\r\n          newArray.push(dict);\r\n\r\n          this.setState({ stocks: newArray });\r\n        })\r\n        //catch any errors and report to user\r\n        .catch(function(error) {\r\n          console.log(error);\r\n          alert(\"Error: Stock symbol is most likely not valid\");\r\n        });\r\n    } else {\r\n      alert(\"Maximum number of stock symbols (50) reached\");\r\n    }\r\n  }\r\n  //get total value of portfolio for rendering\r\n  getTotalValue() {\r\n    var totalVal = 0.0;\r\n    for (var i in this.state.stocks) {\r\n      //check if not null\r\n      if (this.state.stocks[i][\"totalValue\"]) {\r\n        totalVal += this.state.stocks[i][\"totalValue\"];\r\n      }\r\n    }\r\n    // return totalVal.toFixed(3) + \" \" + currSymbol;\r\n    return parseFloat(totalVal).toFixed(3) + this.getCurrencySymbol();\r\n  }\r\n  updateChartDimensions() {\r\n    //set the chart width based on window size\r\n    if (window.innerWidth > 700) {\r\n      this.setState({ chartWidth: 650 });\r\n    } else {\r\n      this.setState({ chartWidth: window.innerWidth - 50 });\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    //resize the chart to window width\r\n    this.updateChartDimensions();\r\n    window.addEventListener(\"resize\", this.updateChartDimensions);\r\n  }\r\n  componentWillMount() {\r\n    //when component mounts, add data from local storage to state\r\n    if (localStorage.getItem(this.props.name + \"Stocks\")) {\r\n      this.setState({\r\n        stocks: JSON.parse(localStorage.getItem(this.props.name + \"Stocks\"))\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    //save stocks in state to localstorage on update\r\n    localStorage.setItem(\r\n      this.props.name + \"Stocks\",\r\n      JSON.stringify(nextState.stocks)\r\n    );\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\r\n  }\r\n  //return chart x axis elements based on selected stocks\r\n  createSelectedXAxises = () => {\r\n    let axises = [];\r\n    for (var key in this.state.selectedStocks) {\r\n      for (var key2 in this.state.stocks) {\r\n        if (\r\n          this.state.stocks[key2][\"name\"] ===\r\n          this.state.selectedStocks[key][\"name\"]\r\n        ) {\r\n          //get name and color of selected stock and use it to style the graph\r\n          var name = this.state.selectedStocks[key][\"name\"];\r\n          var col = this.state.selectedStocks[key][\"color\"];\r\n          var chartStyle = styler([{ key: name, color: col, width: 2 }]);\r\n\r\n          //using the full data of the stock as the series for the graph\r\n          timesrs = new TimeSeries(this.state.stocks[key2][\"fullData\"]);\r\n\r\n          axises.push(\r\n            <LineChart\r\n              axis=\"axis1\"\r\n              columns={[name]}\r\n              style={chartStyle}\r\n              series={timesrs}\r\n            />\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return axises;\r\n  };\r\n  //determine Y-axis scale for chart based on selected stocks\r\n  createSelectedYAxises = () => {\r\n    var maxVal = 0.1;\r\n    var minVal = 2000.0;\r\n\r\n    //loop through data of selected stocks to get the max/min values\r\n    for (var i in this.state.stocks) {\r\n      for (var k in this.state.selectedStocks) {\r\n        if (\r\n          this.state.stocks[i][\"name\"] === this.state.selectedStocks[k][\"name\"]\r\n        ) {\r\n          //for each stock, loop through the values\r\n          for (var j in this.state.stocks[i][\"fullData\"][\"points\"]) {\r\n            var value = parseFloat(\r\n              this.state.stocks[i][\"fullData\"][\"points\"][j][1]\r\n            );\r\n            //if the value is larger than current max, set max to value\r\n            if (value > maxVal) {\r\n              maxVal = value;\r\n            } //if value is lower than previous min, set min to value\r\n            if (value < minVal) {\r\n              minVal = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <YAxis\r\n        id=\"axis1\"\r\n        label=\"\"\r\n        min={minVal}\r\n        max={maxVal}\r\n        width=\"60\"\r\n        type=\"linear\"\r\n        format=\"$,.2f\"\r\n      />\r\n    );\r\n  };\r\n  //return legends for chart\r\n  createLegends() {\r\n    let legends = [];\r\n    //make on legend for each selected stock\r\n    for (var i in this.state.selectedStocks) {\r\n      var name = this.state.selectedStocks[i][\"name\"];\r\n      var col = this.state.selectedStocks[i][\"color\"];\r\n      var categories = [];\r\n      categories.push({ key: name, label: name });\r\n\r\n      //style for colored line in legend\r\n      var legendLineStyle = {\r\n        backgroundcolor: col,\r\n        width: \"20px\",\r\n        marginLeft: \"3px\",\r\n        marginRight: \"3px\",\r\n        marginTop: \"10px\",\r\n        height: \"3px\",\r\n        backgroundColor: col,\r\n        float: \"left\"\r\n      };\r\n\r\n      legends.push(\r\n        <span className=\"legend\">\r\n          <hr style={legendLineStyle} />\r\n          {name}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return legends;\r\n  }\r\n  getCurrencySymbol() {\r\n    if (this.state.currency === \"EUR\") return \" €\";\r\n    else return \" $\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"portfolio shadow-sm\">\r\n        <ModalChart\r\n          className=\"modal\"\r\n          name={this.props.name}\r\n          show={this.state.isShowingChart}\r\n          close={this.closeModalChartHandler}\r\n        >\r\n          <div>\r\n            <ChartContainer\r\n              timeAxisAngledLabels={true}\r\n              timeAxisHeight={65}\r\n              //get the time window from the state, which is set by the\r\n              //date pickers\r\n              timeRange={\r\n                new TimeRange(this.state.startDate, this.state.endDate)\r\n              }\r\n              //if the chart is not showing, set width to 0\r\n              width={this.state.isShowingChart ? this.state.chartWidth : 0}\r\n            >\r\n              <ChartRow height=\"250\">\r\n                {this.createSelectedYAxises()}\r\n\r\n                <Charts>{this.createSelectedXAxises()}</Charts>\r\n              </ChartRow>\r\n            </ChartContainer>\r\n            <div className=\"legend-container\">{this.createLegends()}</div>\r\n          </div>\r\n          Start Date:{\" \"}\r\n          <input\r\n            className=\"input-date\"\r\n            type=\"date\"\r\n            onChange={evt => this.handleStockStartDateChange(evt)}\r\n          />\r\n          End Date:{\" \"}\r\n          <input\r\n            className=\"input-date\"\r\n            type=\"date\"\r\n            onChange={evt => this.handleStockEndDateChange(evt)}\r\n          />\r\n        </ModalChart>\r\n\r\n        <div className=\"portfolio-header-grid\">\r\n          {this.props.name}\r\n          <button\r\n            onClick={this.handleChangeCurrencyToEUR.bind(this)}\r\n            className=\"btn btn-light btn-sm\"\r\n          >\r\n            Show in €\r\n          </button>\r\n          <button\r\n            onClick={this.handleChangeCurrencyToUSD.bind(this)}\r\n            className=\"btn btn-light btn-sm\"\r\n          >\r\n            Show in $\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class=\"close deleteButton\"\r\n            aria-label=\"Close\"\r\n            onClick={this.handleDelete.bind(this)}\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"stocks-container-full\">\r\n          <div className=\"stocks-header\">\r\n            <span className=\"stocks-info\">Stock</span>\r\n            <span className=\"stocks-info\">Quantity</span>\r\n            <span className=\"stocks-info\">Unit value</span>\r\n            <span className=\"stocks-info\">Total value</span>\r\n            <span className=\"stocks-info\">Select</span>\r\n          </div>\r\n\r\n          <div className=\"stocks-container\">\r\n            {this.state.stocks.map(stock => (\r\n              <Stock\r\n                selectStockMethod={this.selectStockMethod.bind(this)}\r\n                name={stock.name}\r\n                unitValue={stock.unitValue + this.getCurrencySymbol()}\r\n                quantity={stock.quantity}\r\n                totalValue={stock.totalValue + this.getCurrencySymbol()}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"portfolio-total-value\">\r\n          Total value of Portfolio: {this.getTotalValue()}\r\n        </div>\r\n        <div className=\"portfolio-footer-buttons\">\r\n          <Modal\r\n            className=\"modal\"\r\n            show={this.state.isShowing}\r\n            close={this.closeModalHandler}\r\n          >\r\n            <div>\r\n              <span className=\"add-stock-input\">\r\n                Stock symbol:{\" \"}\r\n                <input\r\n                  value={this.state.inputStockSymbol}\r\n                  onChange={evt => this.handleStockSymbolChange(evt)}\r\n                  type=\"text\"\r\n                />\r\n              </span>\r\n            </div>\r\n            <div>\r\n              <span className=\"add-stock-input\">\r\n                Number of shares:{\" \"}\r\n                <input\r\n                  value={this.state.inputShareAmount}\r\n                  onChange={evt => this.handleShareAmountChange(evt)}\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  step=\"1\"\r\n                />\r\n              </span>\r\n            </div>\r\n            <div>\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                onClick={this.handleAddStock.bind(this)}\r\n              >\r\n                {\" \"}\r\n                Add stock\r\n              </button>\r\n            </div>\r\n          </Modal>\r\n          <button\r\n            className=\"btn btn-primary btn-sm button-addstock\"\r\n            onClick={this.openModalHandler}\r\n          >\r\n            Add Stock\r\n          </button>\r\n\r\n          <button\r\n            className=\"btn btn-info btn-sm button-graph\"\r\n            onClick={this.openModalChartHandler.bind(this)}\r\n          >\r\n            Perf graph of selected\r\n          </button>\r\n          <button\r\n            className=\"btn btn-danger btn-sm button-removestock\"\r\n            onClick={this.deleteSelectedStocks.bind(this)}\r\n          >\r\n            Remove selected\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Portfolio;\r\n","import React, { Component } from \"react\";\r\nimport Portfolio from \"./portfolio\";\r\n\r\nclass Portfolios extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Assign state itself, and a default value for items\r\n    this.state = {\r\n      portfolios: [],\r\n      inputValue: \"\"\r\n    };\r\n    //bind functions so they can be used\r\n    this.isEmpty = this.isEmpty.bind(this);\r\n    this.clearEmpties = this.clearEmpties.bind(this);\r\n  }\r\n  //checks for empty objects\r\n  isEmpty(obj) {\r\n    for (var key in obj) {\r\n      if (obj.hasOwnProperty(key)) return false;\r\n    }\r\n    return true;\r\n  }\r\n  //removes empties in object\r\n  clearEmpties(obj) {\r\n    let newObj = [];\r\n    Object.keys(obj).forEach(prop => {\r\n      if (obj[prop]) {\r\n        newObj[prop] = obj[prop];\r\n      }\r\n    });\r\n    return newObj;\r\n  }\r\n\r\n  deleteMethod(val) {\r\n    var newArray = this.state.portfolios.slice();\r\n\r\n    for (var o in newArray) {\r\n      if (newArray[o][\"name\"] == val) {\r\n        newArray.splice(o, 1);\r\n        //remove portfolio stocks from local storage\r\n        localStorage.removeItem(val + \"Stocks\");\r\n      }\r\n    }\r\n    newArray = this.clearEmpties(newArray);\r\n    this.setState({ portfolios: newArray });\r\n  }\r\n\r\n  handleAddPortfolio() {\r\n    if (this.state.portfolios.length < 10) {\r\n      var portfolioName = prompt(\"Please enter portfolio name\");\r\n\r\n      if (portfolioName != null) {\r\n        for (var i in this.state.portfolios) {\r\n          if (this.state.portfolios[i][\"name\"] === portfolioName) {\r\n            alert(\r\n              \"Portfolio \" +\r\n                portfolioName +\r\n                \" already exists. Please provide a unique portfolio name\"\r\n            );\r\n            return;\r\n          }\r\n        }\r\n        var newArray = this.state.portfolios.slice();\r\n        var dict = {\r\n          name: portfolioName\r\n        };\r\n        newArray.push(dict);\r\n        this.setState({ portfolios: newArray });\r\n        this.state.inputValue = \"\";\r\n      }\r\n    } else {\r\n      alert(\"Maximum amount of portfolios (10) has been reached\");\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    document.body.style = \"background: #f2f2f2;\";\r\n    localStorage.getItem(\"portfolios\") &&\r\n      this.setState({\r\n        portfolios: JSON.parse(localStorage.getItem(\"portfolios\"))\r\n      });\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    //if there are no portfolios, clear local storage\r\n    //(since that means there is nothing to be stored)\r\n    //to prevent null values from being stored\r\n    if (!this.isEmpty(nextState.portfolios)) {\r\n      localStorage.setItem(\"portfolios\", JSON.stringify(nextState.portfolios));\r\n    } else {\r\n      localStorage.clear();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"portfolios-wrapper\">\r\n        <div class=\"page-header\">\r\n          <h1>Stock Portfolio Management System</h1>\r\n        </div>\r\n        <button\r\n          className=\"button-add-portfolio btn btn-primary\"\r\n          onClick={this.handleAddPortfolio.bind(this)}\r\n        >\r\n          Add Portfolio\r\n        </button>\r\n\r\n        {/* only render portfolios if atleast one exists */}\r\n        {this.state.portfolios.length\r\n          ? this.state.portfolios.map(portfolio => (\r\n              <Portfolio\r\n                name={portfolio.name}\r\n                deleteMethod={this.deleteMethod.bind(this)}\r\n              />\r\n            ))\r\n          : console.log(\"no portfolios found\")}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Portfolios;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport AddBtn from './components/addButton';\nimport Portfolios from './components/portfolios';\n\n//ReactDOM.render(<AddBtn />, document.getElementById('root'));\nReactDOM.render(<Portfolios />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}